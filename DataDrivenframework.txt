
2)Datadriven framework
-------------------------------
===============================



Note: for Datadriven frame_work we have to download and configure Apache-POI to work with Microsoft-office  file
like PPT,word and Excel sheets.

step-1:
--------
Download Release Artifacts - Apache POI

step-2:
--------
Release Archives
Apache POI became a top level project in June 2007 and POI 3.0 artifacts were re-released. Prior to that date POI was a sub-project of Apache Jakarta.

Binary Artifacts


step-3:
--------
Download and extract the poi zip file

[   ] poi-bin-4.1.2-20200217.zip              2020-07-06 14:19   39M 

step-4:
--------
make the excel file with name TestData

sheet:-1 (LoginData)
-----------
uname	pword	Result
uid1	pwd1	
uid2	pwd2	
uid3	pwd3	
uid4	pwd4	
-----------------------

sheet:-2(EmpData)
-----------
Empno	EmpName	salary	status	Result
E001	David	18000	TRUE	
E002	john		FALSE	
E003	smith	20000	TRUE	

---------------------------------------------------------------------------------------------------------------------------------------------	

Note: copy that excel file into java memory(ecllipse or STS), and config the poi jars to buildpath
------------------------------------------------------------------------------------------------------------------------------------------------

* create a package with name demo
* create a class with the name DemoTest

package demo;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class DemoTest {

	public static void main(String[] args) throws IOException {
		
		FileInputStream fi = new FileInputStream("TestData1.xlsx");
		Workbook wb = new XSSFWorkbook(fi);
		wb.createSheet("Demosheet");
		
		
		FileOutputStream fo = new FileOutputStream("TestData1.xlsx");
		wb.write(fo);
		wb.close();
		
		fi.close();
		fo.close();
		
		
	}

}    //note: in this program the new sheet will be created in the excel file(same file). and we are able to create the same duplicate excel file 
               with new created sheet.
-----------------------------------------------------------------------------------------------------------------------------------------------
program to counting the rows present in  the excel sheet
----------------------------------
---------------
package demo;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.sl.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class DemoTest {

	public static void main(String[] args) throws IOException {
		
	/*	FileInputStream fi = new FileInputStream("TestData1.xlsx");
		Workbook wb = new XSSFWorkbook(fi);
		wb.createSheet("Demosheet");
		
		
		FileOutputStream fo = new FileOutputStream("TestData1.xlsx");
		wb.write(fo);
		wb.close();
		
		fi.close();
		fo.close(); */
		
		
		FileInputStream fi = new FileInputStream("TestData1.xlsx");
		Workbook wb = new XSSFWorkbook(fi);
		
		 org.apache.poi.ss.usermodel.Sheet ws1        =  wb.getSheet("LoginData");
		 org.apache.poi.ss.usermodel.Sheet ws2        =  wb.getSheet("EmpData");
		 
		         int sheet1_rowcount           =  ws1.getLastRowNum();
		         int sheet2_rowcount           =  ws2.getLastRowNum();
		         
		  System.out.println("Sheet1_rowcount :"+sheet1_rowcount); 
		  System.out.println("Sheet2_rowcount :"+sheet2_rowcount);
		  
		  fi.close();
		  wb.close();
		
	}

}

    Sheet1_rowcount :4
    Sheet2_rowcount :3

-----------------------------------------------------------------------------------------
 script to count no.of columns present in the specified Row
---------------------------------------------------
package demo;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.sl.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class DemoTest {

	public static void main(String[] args) throws IOException {
		

		
		FileInputStream fi = new FileInputStream("TestData1.xlsx");
		Workbook wb = new XSSFWorkbook(fi);
		
		org.apache.poi.ss.usermodel.Sheet ws       =  wb.getSheet("LoginData");
		
		                            Row row0        = ws.getRow(0);
		                            Row row1        = ws.getRow(1);
		                            
		                    short row0_colcount        = row0.getLastCellNum();
		                    short row1_colcount        = row1.getLastCellNum();
		                    
		                    System.out.println("Row0 cell count : "+row0_colcount);
		                    System.out.println("Row1 cell count : "+row1_colcount);
		                    
		                    
		                    fi.close();
		                    wb.close();
		                    
    }

}
         Row0 cell count : 3
         Row1 cell count : 2

// note: when we are counting cell starts with 1 and row starts with 0 ,when getting cell data starts with from 0th cell 
-----------------------------------------------------------------------------------------------------------------------------------------------

script to Read Data from excel sheet
------------------------------------
package demo;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.sl.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class DemoTest {

	public static void main(String[] args) throws IOException {
		

		
		FileInputStream fi = new FileInputStream("TestData1.xlsx");
		Workbook wb = new XSSFWorkbook(fi);
		
		org.apache.poi.ss.usermodel.Sheet ws       =  wb.getSheet("EmpData");
		
		                            Row row        = ws.getRow(1);
		                            
		                                  Cell c1          = row.getCell(1);
		                                  Cell c2          = row.getCell(2);
		                                  Cell c3          = row.getCell(3);
		                                  
		                                 String ename       = c1.getStringCellValue();
		                                 double salary     =   c2.getNumericCellValue();
		                                 boolean status                 =  c3.getBooleanCellValue(); 
		                                 
		                                 
		                                 System.out.println(ename+" "+salary+"  "+" "+status);
		                                 
		                                 wb.close();
		                                 fi.close();
		                            
		                    
    }

}    David 18000.0   true

------------------------------------------------------------------------------------------------------------------------------------------------

script to handle "null pointer exception" that occurs when no data persent in the cell
--------------------------------------------------
package demo;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.sl.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class DemoTest {

	public static void main(String[] args) throws IOException {
		

		
		FileInputStream fi = new FileInputStream("TestData1.xlsx");
		Workbook wb = new XSSFWorkbook(fi);
		
		org.apache.poi.ss.usermodel.Sheet ws       =  wb.getSheet("EmpData");
		
		                            Row row        = ws.getRow(1);
		                            
		                                String data;
		                                
		                                try {
											
		                                	Cell cell = row.getCell(1);
		                                	      data = cell.getStringCellValue();
		                                	      
		                                	      System.out.println(data);
										} catch (Exception e) {
											
											data="";
											System.out.println("no data found");
										}
		                                 
		                                 wb.close();
		                                 fi.close();
		                            
		                    
    }

}         David
----------------------------------------------------------------------------------------------------------------------------------------------

script to write data into xlsheet cells
------------------------------------------

package demo;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.sl.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class DemoTest {

	public static void main(String[] args) throws IOException {
		

		
		FileInputStream fi = new FileInputStream("TestData1.xlsx");
		Workbook wb = new XSSFWorkbook(fi);
		
		org.apache.poi.ss.usermodel.Sheet ws       =  wb.getSheet("EmpData");
		
		                            Row row        = ws.getRow(1);
		                            Cell cell =  row.createCell(4);
		                            
		                                      cell.setCellValue("pass");
		                            
		                                          
		                           FileOutputStream fo = new FileOutputStream("TestData1.xlsx");
		                            wb.write(fo);
		                            
		                                 wb.close();
		                                 fi.close();
		                                 fo.close();
		                            
		                    }

}

Empno	EmpName	salary	status	Result
E001	David	18000	TRUE	pass
E002	john		FALSE	
E003	smith	20000	TRUE	

------------------------------------------------------------------------------------------------------------------------------------------------

script to fill cell color with Green 
-------------------------------------------
package demo;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.sl.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class DemoTest {

	public static void main(String[] args) throws IOException {
		
        FileInputStream fi = new FileInputStream("TestData1.xlsx");
		Workbook wb = new XSSFWorkbook(fi);
		
		org.apache.poi.ss.usermodel.Sheet ws       =  wb.getSheet("EmpData");
		
		                            Row row        = ws.getRow(1);
		                            Cell cell =  row.createCell(4);
		                            
		                                     // cell.setCellValue("pass");
		                                      
		                                      
		                            CellStyle passstyle = wb.createCellStyle();
		                            passstyle.setFillForegroundColor(IndexedColors.BRIGHT_GREEN.getIndex());
		                            passstyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		                            
		                                        cell.setCellStyle(passstyle);
		                            
		                                          
		                           FileOutputStream fo = new FileOutputStream("TestData1.xlsx");
		                            wb.write(fo);
		                            
		                                 wb.close();
		                                 fi.close();
		                                 fo.close();
		                            
		                    }

}
Empno	EmpName	salary	status	Result
E001	David	18000	TRUE	#green#
E002	john		FALSE	
E003	smith	20000	TRUE	

------------------------------------------------------------------------------------------------------------------------------------------

script to fill cell color with Red 
-------------------------------------------
package demo;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.sl.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class DemoTest {

	public static void main(String[] args) throws IOException {
		
        FileInputStream fi = new FileInputStream("TestData1.xlsx");
		Workbook wb = new XSSFWorkbook(fi);
		
		org.apache.poi.ss.usermodel.Sheet ws       =  wb.getSheet("EmpData");
		
		                            Row row        = ws.getRow(1);
		                            Cell cell =  row.createCell(4);
		                            
		                                      cell.setCellValue("fail");
		                                      
		                                      
		                            CellStyle failstyle = wb.createCellStyle();
		                            failstyle.setFillForegroundColor(IndexedColors.RED.getIndex());
		                            failstyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		                            
		                                        cell.setCellStyle(failstyle);
		                            
		                                          
		                           FileOutputStream fo = new FileOutputStream("TestData1.xlsx");
		                            wb.write(fo);
		                            
		                                 wb.close();
		                                 fi.close();
		                                 fo.close();
		                            
		                    }

}
Empno	EmpName	salary	status	Result
E001	David	18000	TRUE	fail #Red_color#
E002	john		FALSE	
E003	smith	20000	TRUE
---------------------------------------------------------------------------------------------------------------------------------------

package utils;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.sl.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.IndexedColorMap;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class XLutils {
	
	  public static FileInputStream fi;
	  public static FileOutputStream fo;
	  public static Workbook wb;
	  public static org.apache.poi.ss.usermodel.Sheet ws;
	  public static Row row;
	  public static Cell cell;
	  public static CellStyle style;
	  
	  public static int getRowcount(String xlfile,String xlsheet) throws IOException
	  {
		  fi=new FileInputStream(xlfile);
		  wb=new XSSFWorkbook(fi);
		  ws=wb.getSheet(xlsheet);
		  
          int row_count		  =  ws.getLastRowNum();
   
             wb.close();
             fi.close();
             return row_count;
		  
	  }
	  
	  public static short getCellcount(String xlfile,String xlsheet,int rownum) throws IOException
	  {
		  fi=new FileInputStream(xlfile);
		  wb=new XSSFWorkbook(fi);
		  ws=wb.getSheet(xlsheet);
		  row = ws.getRow(rownum);
		  
		  short cellcount=  row.getLastCellNum();
		  
		  wb.close();
          fi.close();
          return cellcount;
	  }
	  
	  public static String getStringCellData(String xlfile,String xlsheet,int rownum,int cellnum) throws IOException
	  {
		  fi=new FileInputStream(xlfile);
		  wb=new XSSFWorkbook(fi);
		  ws=wb.getSheet(xlsheet);
		  row = ws.getRow(rownum);
		  
		  String data;
		  try {
			
			  cell=row.getCell(cellnum);
			  data=cell.getStringCellValue();
			  
		} catch (Exception e) {
			data="";
			System.out.println("no data found ..!");
			
		}
		  wb.close();
          fi.close();
          return data;
		  
	  }
	  
	  public static double getNumericCellData(String xlfile,String xlsheet,int rownum,int cellnum) throws IOException
	  {
		  fi=new FileInputStream(xlfile);
		  wb=new XSSFWorkbook(fi);
		  ws=wb.getSheet(xlsheet);
		  row = ws.getRow(rownum);
		  
		  double data;
		  try {
			 cell=row.getCell(cellnum);
			 data = cell.getNumericCellValue();
		} catch (Exception e) {
			
			data=0.0;
			
		}
		  wb.close();
          fi.close();
          return data; 
	  }
	  
	  public static boolean getBooleanCellData(String xlfile,String xlsheet,int rownum,int colnum) throws IOException
		{
			
			fi = new FileInputStream(xlfile);
			wb = new XSSFWorkbook(fi);
			ws = wb.getSheet(xlsheet);
			row = ws.getRow(rownum);
			
			boolean data;
			try 
			{
				cell = row.getCell(colnum);
				data = cell.getBooleanCellValue();
				
			} catch (Exception e) 
			{
				data = false;			
			}
			wb.close();
			fi.close();
			return data;		
		}
		
		public static void setCellData(String xlfile,String xlsheet,int rownum,int colnum,String data) throws IOException
		{
		
			fi = new FileInputStream(xlfile);
			wb = new XSSFWorkbook(fi);
			ws = wb.getSheet(xlsheet);
			row = ws.getRow(rownum);
			cell = row.createCell(colnum);
			cell.setCellValue(data);
			fo = new FileOutputStream(xlfile);
			wb.write(fo);
			wb.close();
			fi.close();
			fo.close();
		}	
		
		public static void fillGreenColor(String xlfile,String xlsheet,int rownum,int colnum) throws IOException
		{
			
			fi = new FileInputStream(xlfile);
			wb = new XSSFWorkbook(fi);
			ws = wb.getSheet(xlsheet);
			row = ws.getRow(rownum);
			cell = row.getCell(colnum);
			
			style = wb.createCellStyle();
			style.setFillForegroundColor(IndexedColors.BRIGHT_GREEN.getIndex());
			style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
			
			cell.setCellStyle(style);
			
			fo = new FileOutputStream(xlfile);
			wb.write(fo);
			wb.close();
			fi.close();
			fo.close();		
		}
		
		
		public static void fillRedColor(String xlfile,String xlsheet,int rownum,int colnum) throws IOException
		{
			
			fi = new FileInputStream(xlfile);
			wb = new XSSFWorkbook(fi);
			ws = wb.getSheet(xlsheet);
			row = ws.getRow(rownum);
			cell = row.getCell(colnum);
			
			style = wb.createCellStyle();
			style.setFillForegroundColor(IndexedColors.RED.getIndex());
			style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
			
			cell.setCellStyle(style);
			
			fo = new FileOutputStream(xlfile);
			wb.write(fo);
			wb.close();
			fi.close();
			fo.close();		
		}

}
----------------------------------------

TestData1.xlsx

LoginData

uname	pword	Result
uid1	pwd1	
uid2	pwd2	
uid3	pwd3	
uid4	pwd4	

EmpData

Empno	EmpName	salary	status	Result
E001	David	18000	TRUE	
E002	john		FALSE	
E003	smith	20000	TRUE	





------------------------------------------

package demos;

import java.io.IOException;

import utils.XLutils;

public class DemoTest {

	public static void main(String[] args) throws IOException {
		
		   int x           =  XLutils.getRowcount("TestData1.xlsx","LoginData");
		   
		   System.out.println(x);
	}

}      '4'
-------------------------------

package demos;

import java.io.IOException;

import utils.XLutils;

public class DemoTest {

	public static void main(String[] args) throws IOException {
		
		   int x           =  XLutils.getCellcount("TestData1.xlsx","LoginData",1);
		   
		   System.out.println(x);
	}

}     '2'
-------------------------------------------------------

package demos;

import java.io.IOException;

import utils.XLutils;

public class DemoTest {

	public static void main(String[] args) throws IOException {
		
		   String x           =  XLutils.getStringCellData("TestData1.xlsx","EmpData",1,0);
		   
		   System.out.println(x);
	}

}      uid1
---------------------------------------------------------
package demos;

import java.io.IOException;

import utils.XLutils;

public class DemoTest {

	public static void main(String[] args) throws IOException {
		
		   double x           =  XLutils.getNumericCellData("TestData1.xlsx","EmpData",1,2);
		   
		   System.out.println(x);
	}

}     18000.0
----------------------------------------------------------

package demos;

import java.io.IOException;

import utils.XLutils;

public class DemoTest {

	public static void main(String[] args) throws IOException {
		
		   boolean x           =  XLutils.getBooleanCellData("TestData1.xlsx","EmpData",1,3);
		   
		   System.out.println(x);
	}

}     true
------------------------------------------------------------

package demos;

import java.io.IOException;

import utils.XLutils;

public class DemoTest {

	public static void main(String[] args) throws IOException {
		
		    XLutils.setCellData("TestData1.xlsx","EmpData",1,4, "pass");
		   
		   //System.out.println(x);
	}

}    

Empno	EmpName	salary	status	Result
E001	David	18000	TRUE	pass
E002	john		FALSE	
E003	smith	20000	TRUE	
	

----------------------------------------------------

package demos;

import java.io.IOException;

import utils.XLutils;

public class DemoTest {

	public static void main(String[] args) throws IOException {
		
		    XLutils.fillGreenColor("TestData1.xlsx","EmpData",1,4);
		   
		 
	}

}


Empno	EmpName	salary	status	Result
E001	David	18000	TRUE	pass(with green color)
E002	john		FALSE	
E003	smith	20000	TRUE	
-------------------------------------------------------------------

package demos;

import java.io.IOException;

import utils.XLutils;

public class DemoTest {

	public static void main(String[] args) throws IOException {
		
		    XLutils.setCellData("TestData1.xlsx","EmpData",2,4,"fail");
		   
		 
	}

}

Empno	EmpName	salary	status	Result
E001	David	18000	TRUE	pass
E002	john		FALSE	fail
E003	smith	20000	TRUE	

------------------------------------------------------------------------

package demos;

import java.io.IOException;

import utils.XLutils;

public class DemoTest {

	public static void main(String[] args) throws IOException {
		
		    XLutils.fillRedColor("TestData1.xlsx","EmpData",2,4);
		   
		 
	}

}

Empno	EmpName	salary	status	Result
E001	David	18000	TRUE	pass
E002	john		FALSE	fail(with Red color)
E003	smith	20000	TRUE	
--------------------------------------------------------------------------------------------------------------

After completing the Xlutils with all Test cases successfully we have to create utils package with classe Apputils and library package with the classes
Loginpage and employeereg.


package utils;



import java.util.concurrent.TimeUnit;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.edge.EdgeDriver;


public class Apputils {
	public static WebDriver driver;
	public static String url="http://orangehrm.qedgetech.com";
	public static void launchApp()
	{
		System.setProperty("webdriver.edge.driver", "msedgedriver.exe");
		driver = new EdgeDriver();
		driver.manage().deleteAllCookies();
		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(20,TimeUnit.SECONDS);
		driver.get(url);
	}
	
	public static void closeApp()
	{
		driver.close();
	}

}

---------------------------------------------------------------------------------------------------

package library;

import org.openqa.selenium.By;

import utils.Apputils;

public class loginpage extends Apputils {
	
	public void login(String uid,String pwd)
	{
		driver.findElement(By.id("txtUsername")).sendKeys(uid);
		driver.findElement(By.id("txtPassword")).sendKeys(pwd);
		driver.findElement(By.xpath("//*[@type='submit']")).click();
	}
	
	public void logout()
	{
		driver.findElement(By.partialLinkText("Welcome")).click();
		driver.findElement(By.linkText("Logout")).click();
	}
	public boolean Adminlogin()
	{
		
		if(driver.findElement(By.linkText("Admin")).isDisplayed())
		{
			return true;
		}else {
			return false;
		}
	}
	public boolean errmsg(String uid,String pwd)
	{
		driver.findElement(By.id("txtUsername")).sendKeys(uid);
		driver.findElement(By.id("txtPassword")).sendKeys(pwd);
		driver.findElement(By.xpath("//*[@type='submit']")).click();
		
		if(driver.findElement(By.id("spanMessage")).getText().contains("Invalid"))
		{
			return true;
		}else {
			return false;
		}
	}

}
--------------------------------------------------------------------------------------------------------
package library;

import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;

import utils.Apputils;

public class empreglib extends Apputils{
	
	public boolean addemployee(String fname,String lname) throws InterruptedException
	{
		driver.findElement(By.linkText("PIM")).click();
	 	driver.findElement(By.linkText("Add Employee")).click();
		
		driver.findElement(By.id("firstName")).sendKeys(fname);
		driver.findElement(By.id("lastName")).sendKeys(lname);
        String empid = driver.findElement(By.id("employeeId")).getAttribute("value");
        System.out.println("employee id is : "+empid);
        driver.findElement(By.id("btnSave")).click();
        
        driver.findElement(By.linkText("Employee List")).click();
        driver.findElement(By.id("empsearch_id")).sendKeys(empid);
        driver.findElement(By.id("searchBtn")).click();
        
        Thread.sleep(2000);
        
        List<WebElement> rows,cols;
		WebElement restable = driver.findElement(By.id("resultTable"));
		 
		 rows= restable.findElements(By.tagName("tr"));
		 cols=rows.get(1).findElements(By.tagName("td"));
		 
		 if(cols.get(1).getText().equals(empid))
		 {
			 return true;
		 }else {
			 return false;
		}
	}
}


--------------------------------------------------------------------------------------------------
package testcases;

import library.loginpage;
import utils.Apputils;

public class AdminLoginTest {

	public static void main(String[] args) throws InterruptedException {
		 Apputils.launchApp();
		 
		 loginpage lp = new loginpage();
		 lp.login("Admin","Qedge123!@#");
boolean res		 = lp.Adminlogin();

      if(res)
      {
    	  System.out.println("Admin login test pass");
      }else {
		System.out.println("Admin login test fail");
	}
      Thread.sleep(2000);
      lp.logout();
      Apputils.closeApp();
 }
   
}
----------------------------------------------------------------------------------------------------
package testcases;

import library.loginpage;
import utils.Apputils;

public class errormsgTest {

	public static void main(String[] args) throws InterruptedException {
		
		Apputils.launchApp();
		
		loginpage lp =new loginpage();
boolean res	= lp.errmsg("Admin","Qedge123");

       if(res)
       {
    	   System.out.println("error msg test pass");
       }else {
		System.out.println("error msg test fail");
	}
       Thread.sleep(2000);
     Apputils.closeApp();
	}

}
-----------------------------------------------------------------------------------------------------
package testcases;

import library.empreglib;
import library.loginpage;
import utils.Apputils;

public class empregTest {

	public static void main(String[] args) throws InterruptedException {
		
		Apputils.launchApp();
		
		loginpage lp = new loginpage();
		lp.login("Admin","Qedge123!@#");
		Thread.sleep(2000);
		empreglib empreg = new empreglib();
            boolean res		= empreg.addemployee("bittu","gunji");

       if(res)
       {
    	   System.out.println("emp reg test pass");
       }else {
		System.out.println("emp reg test fail");
	}
     Thread.sleep(2000);

      lp.logout();
      Apputils.closeApp();

	}

}
------------------------------------------------------------------------------------

create the xlsheet name like TestData1 and give sheets with names like AdminLoginValidData,loginInvalidData and empregData and copy it to java_memory.

AdminLoginvalidData
--------------------
uname	    pword	       Result
Admin	  Qedge123!@#	


loginwithinvalidInputs
----------------------
uname	pword	Result
Admin	abc	
abc	xyz	
xyz	abc	

empregData
------------
uname	  pword	    Result
Akhil	  gunji
bittu	  karanam
sam	  karanam
David   gunji

---------------------------------------------------------------------------------------

configure TestNG from buildpath and create DDT.xml file and make annotations and have to create test cases.


package testcases;

import java.io.IOException;

import org.testng.annotations.Test;

import junit.framework.Assert;
import library.loginpage;
import utils.Apputils;
import utils.Xlutils;

public class AdminLoginTestvalidData extends Apputils{
	
	String datafile="D:\\Book.xlsx";
	String datasheet="AdminLoginvalidData";
	
	@Test
	public void checkAdminLogin() throws IOException

	{
		int row_count;
		row_count = Xlutils.getRowcount(datafile, datasheet);
		
		loginpage lp = new loginpage();
		String uid,pwd;
		
		for(int i=1;i<=row_count;i++)
		{
			uid=Xlutils.getStringcellData(datafile, datasheet, i, 0);
			pwd=Xlutils.getStringcellData(datafile, datasheet, i, 1);
			lp.login(uid, pwd);
	boolean res		= lp.Adminlogin();
	
	        org.testng.Assert.assertTrue(res);
	        if(res)
	        {
	        	Xlutils.setCellData(datafile, datasheet, i, 2,"pass");
	        	Xlutils.fillGreencolor(datafile, datasheet, i, 2);
	        }else {
				Xlutils.setCellData(datafile, datasheet, i, 2,"fail");
				Xlutils.fillRedcolor(datafile, datasheet, i, 2);
			}
		}
		lp.logout();
	}
}
----------------------------------------------------------------------------------------------

package testcases;

import java.io.IOException;

import org.testng.annotations.Test;

import library.loginpage;
import utils.Apputils;
import utils.Xlutils;

public class LoginTestwithInvalidData extends Apputils {


	String datafile="D:\\Book.xlsx";
	String datasheet="loginwithinvalidInputs";
	
	@Test
	public void checkAdminLogin() throws IOException

	{
		int row_count;
		row_count = Xlutils.getRowcount(datafile, datasheet);
		
		loginpage lp = new loginpage();
		String uid,pwd;
		
		for(int i=1;i<=row_count;i++)
		{
			uid=Xlutils.getStringcellData(datafile, datasheet, i, 0);
			pwd=Xlutils.getStringcellData(datafile, datasheet, i, 1);
			
	boolean res		= lp.errmsg(uid, pwd);
	
	        org.testng.Assert.assertTrue(res);
	        if(res)
	        {
	        	Xlutils.setCellData(datafile, datasheet, i, 2,"pass");
	        	Xlutils.fillGreencolor(datafile, datasheet, i, 2);
	        }else {
				Xlutils.setCellData(datafile, datasheet, i, 2,"fail");
				Xlutils.fillRedcolor(datafile, datasheet, i, 2);
			}
		}
		
	}
}
-------------------------------------------------------------------------------------------

package testcases;

import java.io.IOException;

import org.testng.annotations.Test;

import library.empreglib;
import library.loginpage;
import utils.Apputils;
import utils.Xlutils;

public class empRegTestDDT extends Apputils{
	String datafile="D:\\Book.xlsx";
	String datasheet="empregData";
	
	@Test
	public void empreg() throws IOException, InterruptedException
	{
		int row_count;
		row_count = Xlutils.getRowcount(datafile, datasheet);
		
		loginpage lp = new loginpage();
		lp.login("Admin","Qedge123!@#");
		
		empreglib er = new empreglib();
		
		String fname,lname;
		
		for(int i=1;i<=row_count;i++)
		{
			fname=Xlutils.getStringcellData(datafile, datasheet, i, 0);
			lname=Xlutils.getStringcellData(datafile, datasheet, i, 1);
			
	      boolean res   = er.addemployee(fname, lname);
	
	        org.testng.Assert.assertTrue(res);
	        if(res)
	        {
	        	Xlutils.setCellData(datafile, datasheet, i, 2,"pass");
	        	Xlutils.fillGreencolor(datafile, datasheet, i, 2);
	        }else {
				Xlutils.setCellData(datafile, datasheet, i, 2,"fail");
				Xlutils.fillRedcolor(datafile, datasheet, i, 2);
			}
	        //lp.logout();
		}
		lp.logout();
	}
}


---------------------------------------------------------------------------------------------

<suite name="OrangeHRM Test suite">

   <test name="Admin login testcase">
   
      
  
      <classes>
         <class name="testcases.AdminLoginTestvalidData"></class>
      </classes>
   
   </test>
   
   
   <test name="Admin login invalid inputs testcase">
   
       <classes>
         <class name="testcases.LoginTestwithInvalidData"></class>
      </classes>
   
   </test>
   
    <test name="emp reg Test">
   
       <classes>
         <class name="testcases.empRegTestDDT"></class>
      </classes>
   
   </test>
</suite>
-----------------------------------------------------------------------------------------------------------------------------------------------------------
[RemoteTestNG] detected TestNG version 7.4.0
[TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd" >" at the top of the suite file [C:\Users\adith\eclipse-workspace\Datadrivenframework\Datadriven.xml] otherwise TestNG may fail or not work as expected.
[Configuration] [WARN] Detected a static method [utils.Apputils.launchApp()]. Static configuration methods can cause  unexpected behavior.
[Configuration] [WARN] Detected a static method [utils.Apputils.closeApp()]. Static configuration methods can cause  unexpected behavior.
[Configuration] [WARN] Detected a static method [utils.Apputils.launchApp()]. Static configuration methods can cause  unexpected behavior.
[Configuration] [WARN] Detected a static method [utils.Apputils.closeApp()]. Static configuration methods can cause  unexpected behavior.
[Configuration] [WARN] Detected a static method [utils.Apputils.launchApp()]. Static configuration methods can cause  unexpected behavior.
[Configuration] [WARN] Detected a static method [utils.Apputils.closeApp()]. Static configuration methods can cause  unexpected behavior.
Starting Microsoft Edge WebDriver 107.0.1418.42 (5ed2a3ace08d6077024f01e03930c3504cbb4e4c) on port 32775
To submit feedback, report a bug, or suggest new features, please visit https://github.com/MicrosoftEdge/EdgeWebDriver

Only local connections are allowed.
Please see https://aka.ms/WebDriverSecurity for suggestions on keeping Microsoft Edge WebDriver safe.

Microsoft Edge WebDriver was started successfully.
Nov 24, 2022 4:52:50 PM org.openqa.selenium.remote.ProtocolHandshake createSession
INFO: Detected dialect: W3C
Starting Microsoft Edge WebDriver 107.0.1418.42 (5ed2a3ace08d6077024f01e03930c3504cbb4e4c) on port 27003
To submit feedback, report a bug, or suggest new features, please visit https://github.com/MicrosoftEdge/EdgeWebDriver

Only local connections are allowed.
Please see https://aka.ms/WebDriverSecurity for suggestions on keeping Microsoft Edge WebDriver safe.

Microsoft Edge WebDriver was started successfully.
Nov 24, 2022 4:53:01 PM org.openqa.selenium.remote.ProtocolHandshake createSession
INFO: Detected dialect: W3C
Starting Microsoft Edge WebDriver 107.0.1418.42 (5ed2a3ace08d6077024f01e03930c3504cbb4e4c) on port 6052
To submit feedback, report a bug, or suggest new features, please visit https://github.com/MicrosoftEdge/EdgeWebDriver

Only local connections are allowed.
Please see https://aka.ms/WebDriverSecurity for suggestions on keeping Microsoft Edge WebDriver safe.

Microsoft Edge WebDriver was started successfully.
Nov 24, 2022 4:53:09 PM org.openqa.selenium.remote.ProtocolHandshake createSession
INFO: Detected dialect: W3C
employee id is : 2430
employee id is : 2431
employee id is : 2432
employee id is : 2433

===============================================
OrangeHRM Test suite
Total tests run: 3, Passes: 3, Failures: 0, Skips: 0
===============================================


-----------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------



